''''''
'''
测试类型：
    黑盒测试：
        一种基本的测试手段，也成为功能测试
        根据使用说明等文档进行相关的使用和检测功能，不关注代码
    白盒测试：
        基于代码，全面了解最基本元素，
        测试人员需要具备很强的技术素养
    灰盒测试：
        介于黑盒与白盒之间，既进行功能测试又关注程序的内部逻辑
        但不需要白盒那样细致的代码分析
        
pdb库：
    python自带的库，为python程序提供了一种交互的代码调试功能
    导入调试程序的库：
        import pdb
        
pdb.set_trace():设置断点
    可在代码需要调试的地方（可能出错的代码前面）设置断点
    当程序运行到pdb.set_trace()时，程序暂停并进入调试环境，控制台光标闪烁代表等待用户输入调试程序
    提示但不执行断电后的第一行代码
        
常用调试命令：
    c：continue
        继续执行直到遇到下一条断点语句
    s：step
        执行下一条语句，若为函数调用，则只执行函数的第一句，进入函数中
    n：next
        执行下一条语句，若为函数调用，则执行函数全部内容
    q：quit
        退出调试并结束运行
    输入Enter，会执行上一条指定的调试命令
                    
练习题：
    C 
    C 
    A   C

'''

'''pdb.set_trace()'''
# import pdb
# print('----测试开始----')
# print('----断点之前----')
# pdb.set_trace()
# print('----断点之后----')
# print('----测试结束----')







'''练习1'''
# import pdb
# a=['c','s','n','q']
# b=['继续执行','执行下一条','执行下一条','退出']
# c={}
# print('---将两个相关的列表合并为一个字典---')
# for i in range(4):
#     k=a[i]
#     c[k]=b[i]
#     print(c)
#     pdb.set_trace()
# print('---已完成两个列表合并为一个字典---')







'''练习2'''
# import pdb
# def story1():
#     print('一个土豪，每次出门都担心家中被盗，想买只狼狗栓门前护院，但又不想花钱雇人喂狗。')
#     print('苦思良久后终得一法：每次出门前把wifi修改成无密码，然后放心出门。')
#     print('每次回来都能看到十几个人捧着手机蹲在自家门口，从此无忧。')
#     return '故事1不错吧！'
#
# def story2():
#     print('一位大爷到菜市场买菜，挑了3个西红柿到秤盘，摊主秤了下：“一斤半3块7。”')
#     print('大爷：“做汤不用那么多。”去掉了最大的西红柿。')
#     print('摊主:“一斤二两，3块。”')
#     print('正当身边人想提醒大爷注意秤时，大爷从容地掏出了七毛钱，拿起刚刚去掉的那个大的西红柿，潇洒地走开了。')
#     return '故事2不错吧'
#
# print('-------有这里有两个故事来听听看吧：------')
# print('            ------1-------            ')
# pdb.set_trace()
# story1()
# print('            ------2-------            ')
# pdb.set_trace()
# story2()







'''项目'''
# import pdb
# import random
#
# #数独题目数据列表：空字符串代表待填空的区域
# l0 = [2, 8, 4, 6, 5, 7, 3, 9, 1]
# l1 = [3, ' ', 7, 9, 2, 4, 5, 6, 8]
# l2 = [5, 6, 9, 8, 1, 3, 2, 7, 4]
# l3 = [8, 2, 5, 7, 4, 9, 1, 3, 6]
# l4 = [6, 9, 3, 1, ' ', 2, 4, 5, 7]
# l5 = [7, 4, 1, ' ', 6, 5, 8, 2, 9]
# l6 = [9, 7, 8, 2, 3, 1, 6, 4, 5]
# l7 = [4, 3, 6, 5, 7, ' ', 9, 1, 2]
# l8 = [1, 5, 2, 4, 9, 6, 7, 8, 3]
# numList = [l0, l1, l2, l3, l4, l5, l6, l7, l8]
# #数独答案字典：待填空的位置及答案（位置的行和列均以0开始计数）
# numAnswer = {(1, 1): 1, (4, 4): 8, (5, 3): 3, (7, 5): 8}
#
# def showGame():
#     '''显示界面：根据数独题目最新数据来显示游戏界面'''
#
#     for k in range(9):
#         for i in range(9):
#             print('+-----', end='')
#         print('+')
#         for j in range(9):
#             print('|'+'  '+str(numList[k][j])+'  ', end='')
#         print('|')
#  #       *****************
#     for i in range(9):      ##############################
#         print('+-----', end='')     #############################
#     print('+')      #############################
#
# def posCheck(r, c):
#     '''位置检测（判断玩家输入的位置是否有效，位置错误或位置处已填写数据均为无效位置）'''
#     if (r < 0 or r > 8) or (c < 0 or c > 8):       ##################################
#         print('位置错误，需重新选择目标格子！')
#         return False
#     else:
#         if numList[r][c] == ' ':
#             return True
#         else:
#             print('位置已有数据，需重新选择目标格子！')
#             return False
#
# def numListUpdate(r, c, n):
#     '''答案检测（判断玩家在选定位置输入的答案为答案字典中的数据，如果答案正确则更新题目数据列表）'''
#
#     if n == numAnswer[r, c]:
#         numList[r][c]=n     #########################
#         return True
#     else:
#         print('答案错误，需重新选择目标格子！')
#         return False
#
#
#
# # 以下为游戏主控制
# count = len(numAnswer)  # 获取答案字典的长度，即数独游戏待填空的数量(数量越多，数独难度越高)
# showGame()  # 显示游戏界面
# while True:
#         print('目前游戏空白格子数：', count)
#         print('-----------------------')
#         pos = input('请选择目标位置（行和列均以0开始计数）：如：2，3\n')
#         row = int(pos[0])   # 从输入的字符串中截取行数据
#         col = int(pos[-1])  # 从输入的字符串中截取列数据
#         if posCheck(row, col):  # 进行位置检测
#             answer = int(input('请输入目标位置的答案：'))
#
#             if numListUpdate(row, col, answer):  # 进行位置上的答案检测
#                 showGame()  # 显示最新游戏界面
#                 count-=1    ####################
#                 if count == 0:  # 若空白格子数为0，则退出循环，游戏成功
#                     print('恭喜你，游戏成功！')
#                     break







'''------------------------------------------------------------------------------------------------------------------------------'''




































































